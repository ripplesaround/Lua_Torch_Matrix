---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by ginne.
--- DateTime: 2020/3/17 09:45
---

local _M = {}


function _M.Kronecker(x , y)
    local x1 = x:size()[1]
    local x2 = x:size()[2]
    local y1 = y:size()[1]
    local y2 = y:size()[2]
    local num = 0
    local temp = torch.zeros(y1,y2)
    local temp2 = torch.zeros(y1,x2*y2)
    for i = 1,x1,1 do
        temp = torch.zeros(y1,y2)
        for j = 1,x2,1 do
            num = x[i][j]
            --print(num*y)
            if j==1 then
                temp = temp + num*y
            else
                temp = torch.cat(temp,num*y,2)
            end
        end
        --print(temp)
        if i==1 then
            temp2 = temp2 + temp
        else
            temp2 = torch.cat(temp2,temp,1)
        end
    end
    return temp2
end

-- algebraic_cofactor for one element in first row
function algebraic_cofactor(x,k)
    local x1 = x:size()[1]
    local temp = torch.Tensor(x1-1,x1)
    local temp1 = torch.Tensor(x1-1,x1-1)
    if x1 == 1 then
        return x[1][1]
    else
        local j=1
        for i = 1,x1,1 do
            if i ~= 1 then
                temp[j] = x[i]
                j = j+1
                --print(temp)
            end
        end
        temp = temp:transpose(1,2)
        j = 1
        for i = 1,x1,1 do
            if i ~= k then
                temp1[j] = temp[i]
                j = j+1
                --print(temp)
            end
        end
        temp1 = temp1:transpose(1,2)
    end
    return temp1
end

function _M.det(x)
    local ans = 0
    local x1 = x:size()[1]
    if x1 == 1 then
        return x[1][1]
    else
        for i=1,x1,1 do
            ans = ans + ((-1)^(1+i))*x[1][i]*_M.det(algebraic_cofactor(x,i))
        end
    end
    return ans
end

function _M.rank(x)
    u, s, v = torch.svd(x)
    local x1 = s:size()[1]
    local ans = 0
    local gate = 1e-10
    for i=1,x1,1 do
        if s[i]>gate then
            ans = ans + 1
        end
    end
    return ans
end


function stein(a,b)
    if a<b then
        local temp = b
        b = a
        a = temp
    end
    if b==0 then
        return a
    end
    if a%2 ==0 and b %2 ==0 then
        return 2*stein(a/2,b/2)
    end
    if a%2 ==0 then
        return stein(a/2,b)
    end
    if b%2==0 then
        return stein(a,b/2)
    end
    return stein((a+b)/2,(a-b)/2)
end


function _M.lcm(a,b)
    return a*b/stein(a,b)
end



return _M
